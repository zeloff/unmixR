// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// DPM_sampler
SEXP DPM_sampler(int thin, int iters, NumericMatrix data_, NumericMatrix baseline_, CharacterVector labels_, List consts_, List params);
RcppExport SEXP _unmixR_DPM_sampler(SEXP thinSEXP, SEXP itersSEXP, SEXP data_SEXP, SEXP baseline_SEXP, SEXP labels_SEXP, SEXP consts_SEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type baseline_(baseline_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type labels_(labels_SEXP);
    Rcpp::traits::input_parameter< List >::type consts_(consts_SEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(DPM_sampler(thin, iters, data_, baseline_, labels_, consts_, params));
    return rcpp_result_gen;
END_RCPP
}
// elink
SEXP elink(NumericMatrix ss);
RcppExport SEXP _unmixR_elink(SEXP ssSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ss(ssSEXP);
    rcpp_result_gen = Rcpp::wrap(elink(ss));
    return rcpp_result_gen;
END_RCPP
}
// rwishart
SEXP rwishart(SEXP v, NumericMatrix s);
RcppExport SEXP _unmixR_rwishart(SEXP vSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(rwishart(v, s));
    return rcpp_result_gen;
END_RCPP
}
// rinvwishart
SEXP rinvwishart(NumericVector v, NumericMatrix s);
RcppExport SEXP _unmixR_rinvwishart(SEXP vSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvwishart(v, s));
    return rcpp_result_gen;
END_RCPP
}
// tests2
SEXP tests2();
RcppExport SEXP _unmixR_tests2() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(tests2());
    return rcpp_result_gen;
END_RCPP
}
// fa
SEXP fa();
RcppExport SEXP _unmixR_fa() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(fa());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_unmixR_DPM_sampler", (DL_FUNC) &_unmixR_DPM_sampler, 7},
    {"_unmixR_elink", (DL_FUNC) &_unmixR_elink, 1},
    {"_unmixR_rwishart", (DL_FUNC) &_unmixR_rwishart, 2},
    {"_unmixR_rinvwishart", (DL_FUNC) &_unmixR_rinvwishart, 2},
    {"_unmixR_tests2", (DL_FUNC) &_unmixR_tests2, 0},
    {"_unmixR_fa", (DL_FUNC) &_unmixR_fa, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_unmixR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
